// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4226.BettyLou2019_Command.subsystems;


import org.usfirst.frc4226.BettyLou2019_Command.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4226.BettyLou2019_Command.Constants;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    public double deliver_Cargo_Rocket_POS3 = 8100;
    public double deliver_Hatch_Rocket_POS3 = 6500;
    public double deliver_Cargo_Rocket_POS2 = 5900;
    public double deliver_Hatch_Rocket_POS2 = 4100;
    public double deliver_Cargo_Rocket_POS1 = 3000;
    public double deliver_Hatch_Rocket_POS1 = 1200;

    public double deliver_Cargo_Ship_POS = 4100;
    public double deliver_Hatch_Ship_POS = deliver_Hatch_Rocket_POS1;

    public double pick_Cargo_Depot_POS = 500;
    public double pick_Hatch_Depot_POS = 750;

    public double pick_Cargo_Floor_POS = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX _talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        _talon = new WPI_TalonSRX(1);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        /* Factory default hardware to prevent unexpected behavior */
		_talon.configFactoryDefault();

		/* Set Brake Mode */
		_talon.setNeutralMode(NeutralMode.Brake);

		/* Configure Sensor Source for Pirmary PID */
		_talon.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder,
											Constants.kPIDLoopIdx, 
											Constants.kTimeoutMs);

		/**
		 * Configure Talon SRX Output and Sesnor direction accordingly
		 * Invert Motor to have green LEDs when driving Talon Forward / Requesting Postiive Output
		 * Phase sensor to have positive increment when driving Talon Forward (Green LED)
		 */
		_talon.setSensorPhase(true);
		_talon.setInverted(false);

		/* Set relevant frame periods to be at least as fast as periodic rate */
		_talon.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
		_talon.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);

		/* Set the peak and nominal outputs */
		_talon.configNominalOutputForward(0, Constants.kTimeoutMs);
		_talon.configNominalOutputReverse(0, Constants.kTimeoutMs);
		_talon.configPeakOutputForward(1, Constants.kTimeoutMs);
		_talon.configPeakOutputReverse(-1, Constants.kTimeoutMs);

		/* Set Motion Magic gains in slot0 - see documentation */
		_talon.selectProfileSlot(Constants.kSlotIdx, Constants.kPIDLoopIdx);
		_talon.config_kF(Constants.kSlotIdx, 3.22, Constants.kTimeoutMs);
		_talon.config_kP(Constants.kSlotIdx, 1.023, Constants.kTimeoutMs);
		_talon.config_kI(Constants.kSlotIdx, 0.0, Constants.kTimeoutMs);
		_talon.config_kD(Constants.kSlotIdx, 0.0, Constants.kTimeoutMs);

		/* Set acceleration and vcruise velocity - see documentation */
		_talon.configMotionCruiseVelocity(237, Constants.kTimeoutMs);
		_talon.configMotionAcceleration(237, Constants.kTimeoutMs);

		/* Zero the sensor */
		_talon.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
		_talon.configClearPositionOnLimitR(true, Constants.kTimeoutMs);
    }

    @Override
    public void initDefaultCommand() {
      

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new Elevator_Jog());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        diagnostics();
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_Elevator_MotionMagic(double setpoint){
        /* Motion Magic */ 
		_talon.set(ControlMode.MotionMagic, setpoint);

    }
    public void my_Elevator_Jog(double speed){
        _talon.set(ControlMode.PercentOutput, speed);
    }

    public void my_Elevator_stop(){
        _talon.set(ControlMode.PercentOutput,0.0);
    }

    public void diagnostics(){
        SmartDashboard.putNumber("Current Elevator Height", _talon.getSelectedSensorPosition(0));
    }
}

