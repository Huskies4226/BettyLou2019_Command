// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4226.BettyLou2019_Command.subsystems;


import org.usfirst.frc4226.BettyLou2019_Command.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark motor_0;
    private Spark motor_1_Split;
    private SpeedControllerGroup left_Speed_Controller_Group;
    private Spark motor_2;
    private Spark motor_3_Split;
    private SpeedControllerGroup right_Speed_Controller_Group;
    private DifferentialDrive differential_Drive_1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean m_driveMode = true;

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motor_0 = new Spark(0);
        addChild("Motor_0",motor_0);
        motor_0.setInverted(false);
        
        motor_1_Split = new Spark(1);
        addChild("Motor_1_Split",motor_1_Split);
        motor_1_Split.setInverted(false);
        
        left_Speed_Controller_Group = new SpeedControllerGroup(motor_0, motor_1_Split  );
        addChild("Left_Speed_Controller_Group",left_Speed_Controller_Group);
        
        
        motor_2 = new Spark(2);
        addChild("Motor_2",motor_2);
        motor_2.setInverted(false);
        
        motor_3_Split = new Spark(3);
        addChild("Motor_3_Split",motor_3_Split);
        motor_3_Split.setInverted(false);
        
        right_Speed_Controller_Group = new SpeedControllerGroup(motor_2, motor_3_Split  );
        addChild("Right_Speed_Controller_Group",right_Speed_Controller_Group);
        
        
        differential_Drive_1 = new DifferentialDrive(left_Speed_Controller_Group, right_Speed_Controller_Group);
        addChild("Differential_Drive_1",differential_Drive_1);
        differential_Drive_1.setSafetyEnabled(true);
        differential_Drive_1.setExpiration(0.1);
        differential_Drive_1.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoySticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_DriveTank(double leftSpeed, double rightSpeed) {
        differential_Drive_1.tankDrive(leftSpeed, rightSpeed, true);
    }

    public void my_DriveArchade(double xSpeed, double zRotation) {
        differential_Drive_1.arcadeDrive(xSpeed, zRotation, true);
    }

    public boolean my_getDriveMode(){
        return m_driveMode;
    }

    public void my_setDriveMode(boolean archadeMode){
        m_driveMode = archadeMode;
        //Put a Driver Mode Switch on the smart Dashboard
        SmartDashboard.putBoolean("Diver Mode Archade", m_driveMode);
    }
}

